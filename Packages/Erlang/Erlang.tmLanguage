<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>erl</string>
		<string>hrl</string>
	</array>
	<key>name</key>
	<string>Erlang</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#module-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#import-export-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#export-type-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#record-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#spec-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>source.erlang.expression</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#illegal-shebang-comment</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>atom</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.symbol.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.symbol.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.symbol.quoted.single.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.escape.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.escape.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:\\(?:\^.|[0-7]{1,3}|x[0-9a-fA-F]{2}|x\{[0-9a-fA-F]+\}|[^x\^]))</string>
							<key>name</key>
							<string>constant.other.symbol.escape.erlang</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\\^?.?</string>
							<key>name</key>
							<string>invalid.illegal.symbol.escape.erlang</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>[[:lower:]][[:alnum:]@_]*</string>
					<key>name</key>
					<string>constant.other.symbol.unquoted.erlang</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>begin</key>
			<string>(%+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.erlang</string>
		</dict>
		<key>directive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(-)((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.directive.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>export-type-directive</key>
		<dict>
			<key>begin</key>
			<string>^\s*(-)(export_type)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.begin.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.directive.export-type.erlang</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))\s*(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.directive.export-type.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.list.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.list.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.structure.list.type.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.macro.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.type-arity.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.numeric.arity.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*)))\s*(/)\s*([\d]+)</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.list.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>function</key>
		<dict>
			<key>begin</key>
			<string>^\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*)))\s*(?=\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.definition.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.macro.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.function.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function-definition.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*)))\s*(?=\()</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\()</string>
					<key>end</key>
					<string>(;)|(?=\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.clauses.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-clause.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthesized-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#internal-function-parts</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>source.erlang.expression</string>
				</dict>
			</array>
		</dict>
		<key>illegal-keyword</key>
		<dict>
			<key>match</key>
			<string>\b(after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\b</string>
			<key>name</key>
			<string>invalid.illegal.keyword.control.erlang</string>
		</dict>
		<key>illegal-shebang-comment</key>
		<dict>
			<key>match</key>
			<string>#!.*</string>
			<key>name</key>
			<string>invalid.illegal.comment.shebang.erlang</string>
		</dict>
		<key>import-export-directive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(-)(import)\s*(\()\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(,)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.import.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.module.erlang</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))\s*(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.directive.import.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-function-list</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(-)(export)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.export.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))\s*(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.directive.export.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-function-list</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>integer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>2(#)[0-1]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.binary.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>3(#)[0-2]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-3.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>4(#)[0-3]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-4.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>5(#)[0-4]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-5.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>6(#)[0-5]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-6.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>7(#)[0-6]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-7.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>8(#)[0-7]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.octal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>9(#)[0-8]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-9.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>10(#)\d+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>11(#)[\daA]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-11.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>12(#)[\da-bA-B]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-12.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>13(#)[\da-cA-C]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-13.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>14(#)[\da-dA-D]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-14.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>15(#)[\da-eA-E]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-15.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>16(#)\h+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>17(#)[\da-gA-G]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-17.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>18(#)[\da-hA-H]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-18.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>19(#)[\da-iA-I]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-19.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>20(#)[\da-jA-J]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-20.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>21(#)[\da-kA-K]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-21.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>22(#)[\da-lA-L]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-22.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>23(#)[\da-mA-M]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-23.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>24(#)[\da-nA-N]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-24.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>25(#)[\da-oA-O]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-25.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>26(#)[\da-pA-P]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-26.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>27(#)[\da-qA-Q]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-27.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>28(#)[\da-rA-R]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-28.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>29(#)[\da-sA-S]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-29.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>30(#)[\da-tA-T]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-30.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>31(#)[\da-uA-U]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-31.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>32(#)[\da-vA-V]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-32.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>33(#)[\da-wA-W]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-33.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>34(#)[\da-xA-X]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-34.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>35(#)[\da-yA-Y]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-35.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>36(#)[\da-zA-Z]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-36.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d+#[\da-zA-Z]+</string>
					<key>name</key>
					<string>invalid.illegal.integer.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d+</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.erlang</string>
				</dict>
			</array>
		</dict>
		<key>internal-expression-list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.expressions.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.erlang.expression</string>
				</dict>
			</array>
		</dict>
		<key>internal-function-list</key>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.structure.list.function.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function-arity.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(,)|(?=\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.list.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>source.erlang.expression</string>
				</dict>
			</array>
		</dict>
		<key>internal-function-parts</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#internal-guard-expression</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(-&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function.head-body.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\bend\b|\.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-expression-list</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>internal-guard-expression</key>
		<dict>
			<key>begin</key>
			<string>(when)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.when.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=-&gt;)</string>
			<key>name</key>
			<string>meta.guard-expression.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,|;</string>
					<key>name</key>
					<string>punctuation.separator.guards.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.erlang.expression</string>
				</dict>
			</array>
		</dict>
		<key>internal-type-definition</key>
		<dict>
			<key>begin</key>
			<string>\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*)))\s*(?=\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.definition.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.macro.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\)?\s*\.)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.type.head-body.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\)?\s*\.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>[^\s]</string>
					<key>name</key>
					<string>invalid.illegal.type-parameter.erlang</string>
				</dict>
			</array>
		</dict>
		<key>internal-type-spec</key>
		<dict>
			<key>begin</key>
			<string>(?:(?:((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*)))\s*(:)\s*)?((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)|(\?(?:[[:alpha:]_][[:alnum:]@_]*))))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.erlang entity.name.type.class.module.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.macro.erlang</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.module-function.erlang</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.erlang</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.macro.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\.|\)\s*\.)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.function.parameters.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(-&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function.head-body.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\.|\)\s*\.)</string>
					<key>name</key>
					<string>meta.type.function.return-value.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(when)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.when.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=;|\.|\)\s*\.)</string>
							<key>name</key>
							<string>meta.type.bounded-quantification.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\b(is_subtype)\s*(\()</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.is-subtype.erlang</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameters.begin.erlang</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(\))</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameters.end.erlang</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>,</string>
											<key>name</key>
											<string>punctuation.separator.parameters.erlang</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#type-expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-variable-type</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>internal-variable-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*))\s*(::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.variable-type.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|,|\.|\]|\}|\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>macro-usage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\?(?:[[:alpha:]_][[:alnum:]@_]*))\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\?(?:[[:alpha:]_][[:alnum:]@_]*))(?!\()</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.macro.stringify.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.preprocessor.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\?\?)((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*))</string>
				</dict>
			</array>
		</dict>
		<key>module-directive</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.begin.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.directive.module.erlang</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.erlang</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.module.definition.erlang</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.erlang</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.end.erlang</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(-)(module)\s*(\()\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\))\s*(\.)</string>
			<key>name</key>
			<string>meta.directive.module.erlang</string>
		</dict>
		<key>parenthesized-expression</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.expression.parenthesized</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.erlang.expression</string>
				</dict>
			</array>
		</dict>
		<key>preprocessor-directive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(-)(ifdef|ifndef|undef)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.preprocessor.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))\s*(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?:[[:alpha:]_][[:alnum:]@_]*)</string>
							<key>name</key>
							<string>entity.name.macro.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.preprocessor.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.preprocessor-directive-parameters.erlang</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.preprocessor-directive-parameters.erlang</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(-)(else|endif)\s*((\()\s*(\)))?(\.)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(-)\s*(define)\s*(\()\s*(((?:[[:alpha:]_][[:alnum:]@_]*)))\s*(,)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.begin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.preprocessor.define.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.macro.definition.erlang</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))\s*(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.directive.define.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=^\s*-\s*define\s*\(\s*(?:[[:alpha:]_][[:alnum:]@_]*)\s*\()</string>
					<key>end</key>
					<string>(\))\s*(\.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.directive.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.directive.define.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>^\s*(-)\s*(define)\s*(\()\s*(((?:[[:alpha:]_][[:alnum:]@_]*)))\s*(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.directive.begin.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.control.directive.preprocessor.define.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>keyword.other.macro.erlang</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>entity.name.macro.definition.erlang</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\))\s*(,)</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameters.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>source.erlang.expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>record-directive</key>
		<dict>
			<key>begin</key>
			<string>^\s*(-)(record)\s*(\()\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(,)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.begin.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.directive.record.erlang</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.erlang</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.record.definition.erlang</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))\s*(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.directive.record.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.fields.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.fields.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.record.field.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\s*(,)|\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(=)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.assignment.erlang</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=\s*::|\s*,|\s*\})</string>
									<key>name</key>
									<string>meta.field-initializer.erlang</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>source.erlang.expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(::)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.field-type.erlang</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=\s*,|\s*\})</string>
									<key>name</key>
									<string>meta.field-type.erlang</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#type-expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.fields.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>spec-directive</key>
		<dict>
			<key>begin</key>
			<string>^\s*(-)(callback|spec)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.begin.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.directive.spec.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.directive.spec.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-type-spec</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\s</string>
					<key>comment</key>
					<string>brackets around type definition are optional</string>
					<key>end</key>
					<string>(?=\.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>;</string>
							<key>name</key>
							<string>punctuation.separator.clauses.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#internal-type-spec</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-directive</key>
		<dict>
			<key>begin</key>
			<string>^\s*(-)(type|opaque)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.begin.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.directive.type.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.directive.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.directive.type.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-type-definition</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\s</string>
					<key>comment</key>
					<string>brackets around type definition are optional</string>
					<key>end</key>
					<string>(?=\.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-type-definition</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.type-expression.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.type-expression.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.union.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\|)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(fun)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.type.function.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.function.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\))</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.erlang</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.type.function.args.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\.\.\.</string>
									<key>name</key>
									<string>keyword.other.type.ellipsis.erlang</string>
								</dict>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.args.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#type-expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(-&gt;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.function.head-body.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>name</key>
							<string>meta.type.function.return-value.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type-expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[^\s]</string>
							<key>name</key>
							<string>invalid.illegal.erlang</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(any|term|boolean|byte|binary|bitstring|char|non_neg_integer|pos_integer|neg_integer|number|integer|float|tuple|iolist|string|nonempty_string|module|atom|pid|port|reference|mfa|node|timeout|no_return|none)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.builtin.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.type.begin.erlang</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>type arguments given to predefined arity-0 types are marked invalid</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.type.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[^\s]</string>
							<key>name</key>
							<string>invalid.illegal.parameter.builtin-arity-0-type.erlang</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?:((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?\s*(:)\s*)?((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.module.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.module-type.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.type.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.type.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.type.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.module.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.module-type.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.erlang</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match incomplete type references to improve typing experience</string>
					<key>match</key>
					<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?\s*(:)((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?(?!:)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tuple.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tuple.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.tuple.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.tuple.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(,)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(#(?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.record.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.record.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.record.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.record.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(::)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.record.field.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.field-type.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=,|\})</string>
							<key>name</key>
							<string>meta.field-type.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type-expression</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.list.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.list.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.list.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.list.erlang</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\.\.\.</string>
							<key>name</key>
							<string>keyword.other.type.ellipsis.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(&lt;&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binary.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(&gt;&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binary.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.binary.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(_)\s*(:)\s*(_)\s*(\*)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.field-size.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.field-size.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.field-size.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.field-size.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=,|&gt;&gt;)</string>
							<key>name</key>
							<string>meta.type.binary.field-size.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#integer</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#macro-usage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>match</key>
									<string>[^\s]</string>
									<key>name</key>
									<string>invalid.illegal.type.binary.erlang</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(_)\s*(:)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.base-size.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.binary.base-size.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=,|&gt;&gt;)</string>
							<key>name</key>
							<string>meta.type.binary.base-size.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#integer</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#macro-usage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>match</key>
									<string>[^\s]</string>
									<key>name</key>
									<string>invalid.illegal.type.binary.erlang</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.binary.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#macro-usage</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[^\s]</string>
							<key>name</key>
							<string>invalid.illegal.type.binary.erlang</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=((-?([0-9]+#)?[0-9a-zA-Z]+)|\?(?:[[:alpha:]_][[:alnum:]@_]*))\s*\.\.\s*((-?([0-9]+#)?[0-9a-zA-Z]+)|\?(?:[[:alpha:]_][[:alnum:]@_]*)))</string>
					<key>end</key>
					<string>(?=\}|\]|\)|&gt;|,|\||\.(?!\.))</string>
					<key>name</key>
					<string>constant.other.type.range.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.type.range.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\s*(\.\.)\s*</string>
						</dict>
						<dict>
							<key>match</key>
							<string>-</string>
							<key>name</key>
							<string>keyword.operator.symbolic.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#integer</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#macro-usage</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#atom</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro-usage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#internal-variable-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.language.omitted.erlang</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*))|(_)</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.erlang</string>
</dict>
</plist>
